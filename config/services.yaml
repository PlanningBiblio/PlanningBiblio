# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Migrations,Tests,Kernel.php}'

    notifier:
        class: App\PlanningBiblio\Notifier
        public: true

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
        calls:
            - setNotifier: ['@notifier']

    # The URL Listener defines the requested URL in the config table
    App\EventListener\UrlListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 120 }

    # The Login Listener redirects the user to the login page if his session is not open
    #Â It also redirects the user to the home page if he tries to access the login page while his session is open
    App\EventListener\LoginListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 100 }

    # The Cron Listener checks if cron jobs are pending execution and launches them
    App\EventListener\CronListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 80 }

    # The Authorization Listener checks the user's rights and redirects him to the access denied page if the rights do not match
    App\EventListener\ControllerAuthorizationListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Entity\Extensions\TablePrefix:
        arguments:
            $prefix: '%env(resolve:DATABASE_PREFIX)%'
        public: true
